Starry接口分析：

1、openat

 

```rust
    let ans = if path.is_dir() {
        debug!("open dir");
    if let Ok(dir) = new_dir(path.path().to_string(), flags.into()) {
            debug!("new dir_desc successfully allocated: {}", path.path());
            process_inner.fd_manager.fd_table[fd_num] = Some(Arc::new(SpinNoIrq::new(dir)));
            fd_num as isize
        } else {
            debug!("open dir failed");
            ErrorNo::ENOENT as isize
        }
    }
    // 如果是FILE，注意若创建了新文件，需要添加链接
    else {
        debug!("open file");
        if let Ok(file) = new_fd(path.path().to_string(), flags.into()) {
            debug!("new file_desc successfully allocated");
            process_inner.fd_manager.fd_table[fd_num] = Some(Arc::new(SpinNoIrq::new(file)));
            let _ = create_link(&path, &path); // 不需要检查是否成功，因为如果成功，说明是新建的文件，如果失败，说明已经存在了
            fd_num as isize
        } else {
            debug!("open file failed");
            ErrorNo::ENOENT as isize
        }
    };
```

```
new_fd(path.path().to_string(), flags.into())
```

该函数返回类型为FileDesc，定义如下：

```rust
pub struct FileDesc {
    /// 文件路径
    pub path: String,
    /// 文件
    pub file: Arc<Mutex<File>>,
    /// 文件打开的标志位
    pub flags: OpenFlags,
    /// 文件信息
    pub stat: Mutex<FileMetaData>,
}
```

new_fd的定义如下：

```rust

/// 新建一个文件描述符
pub fn new_fd(path: String, flags: OpenFlags) -> AxResult<FileDesc> {
    debug!("Into function new_fd, path: {}", path);
    let file = new_file(path.as_str(), &flags)?;
    // let file_size = file.metadata()?.len();
    let fd = FileDesc::new(path.as_str(), Arc::new(Mutex::new(file)), flags);
    Ok(fd)
}
```

它通过new_file函数和path路径创建FileDesc：

```rust
pub fn new_file(path: &str, flags: &OpenFlags) -> AxResult<File> {
    let mut file = File::options();
    file.read(flags.readable());
    file.write(flags.writable());
    file.create(flags.creatable());
    file.create_new(flags.new_creatable());
    file.open(path)
}
```

new_file调用File类型的open方法来创建File，File类型定义：

```rust
pub struct File {
    inner: fops::File,
}
```

open方法为：

```rust
/// Opens a file at `path` with the options specified by `self`.
pub fn open(&self, path: &str) -> Result<File> {
    fops::File::open(path, &self.0).map(|inner| File { inner })
}
```

fops::File结构为：

```rust
pub struct File {
    node: WithCap<VfsNodeRef>,
    is_append: bool,
    offset: u64,
}
```

fops::File::open方法为：

```rust
pub fn open(path: &str, opts: &OpenOptions) -> AxResult<Self> {
        Self::_open_at(None, path, opts)
    }

impl File {
    fn _open_at(dir: Option<&VfsNodeRef>, path: &str, opts: &OpenOptions) -> AxResult<Self> {
        debug!("open file: {} {:?}", path, opts);
        if !opts.is_valid() {
            return ax_err!(InvalidInput);
        }

        let node_option = crate::root::lookup(dir, path);
        let node = if opts.create || opts.create_new {
            match node_option {
                Ok(node) => {
                    // already exists
                    if opts.create_new {
                        return ax_err!(AlreadyExists);
                    }
                    node
                }
                // not exists, create new
                Err(VfsError::NotFound) => crate::root::create_file(dir, path)?,
                Err(e) => return Err(e),
            }
        } else {
            // just open the existing
            node_option?
        };

        let attr = node.get_attr()?;
        if attr.is_dir()
            && (opts.create || opts.create_new || opts.write || opts.append || opts.truncate)
        {
            return ax_err!(IsADirectory);
        }
        let access_cap = opts.into();
        if !perm_to_cap(attr.perm()).contains(access_cap) {
            return ax_err!(PermissionDenied);
        }

        node.open()?;
        if opts.truncate {
            node.truncate(0)?;
        }
        Ok(Self {
            node: WithCap::new(node, access_cap),
            is_append: opts.append,
            offset: 0,
        })
    }
```

文件node获取的接口为：

```rust
crate::root::lookup(dir, path)
```

